import { g as h, C as L, c as $, Z as S } from "./assets/vendor.4684d89f.js"; let C = null; function F() { const s = document.querySelector(".scan"); if (!!s) return C && C.kill(), C = h.timeline({ repeat: -1, repeatDelay: 10, delay: 4 }), C.fromTo(s, { top: "0%" }, { top: "100%", duration: 4, ease: "none" }), C } h.registerPlugin(L); L.create("serpeasing", "M0,0 C0.37,0.01 0.01,0.99 1,1"); function G() { const s = document.querySelector(".loader"), t = document.querySelector(".loader-wrap"), e = document.querySelector(".scan.is-loader-1"), i = document.querySelector(".progress-amount"), n = document.querySelectorAll(".loader_log"), o = [".loader_logos", ".loader_logs", ".loader_progress"], r = [".logo-2", ".logo-3", ".logo-4", ".logo-5", ".logo-6"]; if (!s) return; const l = 1.5, a = l / r.length, d = l / n.length, c = h.timeline(); return c.set(s, { display: "flex", height: "120svh" }, 0), c.set(o, { display: "block", opacity: 1 }, 0), r.forEach((m, f) => { c.set(m, { display: "block" }, f * a) }), n.forEach((m, f) => { c.set(m, { display: "block" }, f * d) }), c.to(i, { innerText: 100, duration: l, roundProps: "innerText", onUpdate: function () { const m = this.targets()[0].innerText; this.targets()[0].innerText = `[ ${m}% ]` }, ease: "none" }, 0), e && h.to(e, { y: "120svh", duration: 2.2, ease: "serpeasing" }), c.to(t, { height: 0, duration: 1.8, ease: "serpeasing", onComplete: () => { document.body.style.overflow = "", s && s.remove() } }), c } let b = null, T = null; function R() { if (T) return T; const s = { snakeHeadImg: null, snakeTailImg: null }, e = getComputedStyle(document.documentElement).getPropertyValue("--base-colors--serp-red").trim(), i = document.querySelector(".snake-head"); if (i) { const o = i.cloneNode(!0); o.removeAttribute("style"), o.setAttribute("width", "100%"), o.setAttribute("height", "100%"), o.setAttribute("viewBox", "0 0 7 7"); const r = o.getElementsByTagName("*"); for (let m of r) m.setAttribute("fill", e); o.setAttribute("fill", e); const l = new XMLSerializer().serializeToString(o), d = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(l)}`, c = new Image; c.src = d, s.snakeHeadImg = c } const n = document.querySelector(".snake-tail"); if (n) { const o = n.cloneNode(!0); o.removeAttribute("style"), o.setAttribute("width", "100%"), o.setAttribute("height", "100%"), o.setAttribute("viewBox", "0 0 7 7"); const r = o.getElementsByTagName("*"); for (let m of r) m.setAttribute("fill", e); o.setAttribute("fill", e); const l = new XMLSerializer().serializeToString(o), d = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(l)}`, c = new Image; c.src = d, s.snakeTailImg = c } return T = s, s } class z { constructor(t) { if (b) return console.warn("Game instance already exists, use SnakeGame.initialize() instead"), b; this.container = t, this.canvas = null, this.ctx = null, this.snake = null, this.direction = null, this.food = null, this.interval = null, this.animationFrameId = null, this.resizeObserver = null, this.resizeTimeout = null, this.score = 0, this.bestScore = this.loadBestScore(), this.directionQueue = []; const e = R(); this.snakeHeadImg = e.snakeHeadImg, this.snakeTailImg = e.snakeTailImg, this.cellMinSize = 20, this.gridSize = 0, this.cellWidth = 0, this.cellHeight = 0, this.totalRows = 0, this.gameSpeed = this.isMobileOrTablet() ? 170 : 100, this.lostScreen = document.querySelector(".game_lost"), this.restartBtn = document.getElementById("restart"), this.scoreElement = document.getElementById("score"), this.bestScoreElement = document.getElementById("best-score"), this.gameControls = document.querySelector(".game-controls"); const i = getComputedStyle(document.documentElement); this.serpRed = i.getPropertyValue("--base-colors--serp-red").trim(), this.black = i.getPropertyValue("--base-colors--black").trim(), this.initialize(), this.updateScore(), this.updateBestScore() } static initialize() { var i; if (((i = document.querySelector('[data-barba="container"]')) == null ? void 0 : i.dataset.barbaNamespace) !== "home") return null; const e = document.querySelector(".game_inner"); return e ? b ? (b.container = e, b.initialize(), b) : (b = new z(e), b) : null } initialize() { const t = this.container.querySelector(".score-display"); t && t.remove(); const e = document.createElement("div"); e.className = "score-display", e.style.position = "absolute", e.style.top = "10px", e.style.right = "10px", e.style.color = "var(--base-colors--serp-red)", e.style.fontFamily = "ABC Monument Grotesk Mono", e.style.fontSize = "0.75rem", e.style.textTransform = "uppercase", e.style.zIndex = "1", this.container.appendChild(e); const i = this.container.querySelector(".game-canvas"); i && i.remove(), this.canvas = document.createElement("canvas"), this.canvas.className = "game-canvas", this.canvas.id = "game-canvas", this.canvas.style.display = "block", this.canvas.style.width = "100%", this.canvas.style.height = "100%", this.container.appendChild(this.canvas), this.ctx = this.canvas.getContext("2d"), this.setupEventListeners(), this.bestScoreElement = document.getElementById("best-score"), this.bestScoreElement && this.updateBestScore(), this.resizeCanvas(), this.startGame() } setupEventListeners() { this.resizeObserver = new ResizeObserver(() => { clearTimeout(this.resizeTimeout), this.resizeTimeout = setTimeout(() => this.resizeCanvas(), 100) }), this.resizeObserver.observe(this.container), window.addEventListener("resize", () => { clearTimeout(this.resizeTimeout), this.resizeTimeout = setTimeout(() => this.resizeCanvas(), 100) }); const t = document.querySelectorAll(".game-controls_arrow"), e = i => { const n = { "is--up": -this.gridSize, "is--down": this.gridSize, "is--left": -1, "is--right": 1 }; for (const o of i.classList) if (n[o] !== void 0) { const r = n[o], l = this.directionQueue.length > 0 ? this.directionQueue[this.directionQueue.length - 1] : this.direction; r !== l && (this.directionQueue.push(r), this.directionQueue.length > 2 && (this.directionQueue = this.directionQueue.slice(-2))); break } }; t.forEach(i => { i.addEventListener("click", () => e(i)) }), this.mobileControls = t, this.handleMobileControl = e, this.isMobileOrTablet() && this.gameControls && (this.gameControls.style.display = "flex"), document.addEventListener("keydown", i => { let n; switch (i.key) { case "ArrowUp": n = -this.gridSize; break; case "ArrowDown": n = this.gridSize; break; case "ArrowLeft": n = -1; break; case "ArrowRight": n = 1; break; default: return }const o = this.directionQueue.length > 0 ? this.directionQueue[this.directionQueue.length - 1] : this.direction; n !== o && (this.directionQueue.push(n), this.directionQueue.length > 2 && (this.directionQueue = this.directionQueue.slice(-2))) }), this.restartBtn && this.restartBtn.addEventListener("click", () => { this.isMobileOrTablet() && (this.restartBtn && (this.restartBtn.style.display = "none"), this.gameControls && (this.gameControls.style.display = "flex")), this.startGame() }) } resizeCanvas() { const t = this.container.getBoundingClientRect(); this.canvas.width = t.width, this.canvas.height = t.height; const e = { cols: Math.floor(t.width / this.cellMinSize) }; e.cellWidth = t.width / e.cols, e.rows = Math.floor(t.height / e.cellWidth), e.cellHeight = t.height / e.rows, e.ratio = Math.abs(e.cellWidth - e.cellHeight); const i = { rows: Math.floor(t.height / this.cellMinSize) }; i.cellHeight = t.height / i.rows, i.cols = Math.floor(t.width / i.cellHeight), i.cellWidth = t.width / i.cols, i.ratio = Math.abs(i.cellWidth - i.cellHeight); const n = e.ratio < i.ratio ? e : i; this.gridSize = n.cols, this.totalRows = n.rows, this.cellWidth = n.cellWidth, this.cellHeight = n.cellHeight; const o = this.isMobileOrTablet() ? 170 : 100; if (this.gameSpeed = o, this.food !== null) { const r = this.food % this.gridSize, l = Math.floor(this.food / this.gridSize); (r < 0 || r >= this.gridSize || l < 0 || l >= this.totalRows) && this.placeFood() } if (this.snake) { clearInterval(this.interval); const l = this.snake.map(a => ({ x: a % this.gridSize, y: Math.floor(a / this.gridSize) })).filter(a => a.y < this.totalRows); l.length < this.snake.length ? this.startGame() : (this.snake = l.map(a => a.y * this.gridSize + a.x), this.draw(), this.interval = setInterval(() => this.move(), this.gameSpeed)) } } startGame() { this.animationFrameId && cancelAnimationFrame(this.animationFrameId), this.interval && clearInterval(this.interval); const t = Math.floor(this.gridSize / 2), i = Math.floor(this.totalRows / 2) * this.gridSize + t; this.snake = [i, i - 1, i - 2], this.direction = 1, this.directionQueue = [], this.score = 0, this.gameSpeed = this.isMobileOrTablet() ? 170 : 100, this.updateScore(), this.updateBestScore(), typeof v == "function" && v(), this.placeFood(), (isNaN(this.food) || this.food < 0 || this.food >= this.gridSize * this.totalRows) && this.placeFood(), this.lostScreen && (this.lostScreen.style.display = "none"), this.draw(), this.interval = setInterval(() => this.move(), this.gameSpeed) } draw() { if (this.ctx.fillStyle = this.black, this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height), this.snake.forEach((t, e) => { const i = t % this.gridSize * this.cellWidth, n = Math.floor(t / this.gridSize) * this.cellHeight; if (e === 0 && this.snakeHeadImg) { this.ctx.save(); const o = i + this.cellWidth / 2, r = n + this.cellHeight / 2; this.ctx.translate(o, r); let l = 0; switch (this.direction) { case 1: l = 90; break; case -1: l = -90; break; case this.gridSize: l = 180; break; case -this.gridSize: l = 0; break }this.ctx.rotate(l * Math.PI / 180); const a = Math.min(this.cellWidth, this.cellHeight), d = this.direction === 1 || this.direction === -1 ? a : this.cellWidth, c = this.direction === 1 || this.direction === -1 ? this.cellHeight : a; this.ctx.drawImage(this.snakeHeadImg, -d / 2, -c / 2, d, c), this.ctx.restore() } else if (e === this.snake.length - 1 && this.snakeTailImg) { this.ctx.save(); let o = 0; if (this.snake.length > 1) { const a = this.snake[this.snake.length - 1], d = this.snake[this.snake.length - 2]; let c = d - a; d % this.gridSize == 0 && a % this.gridSize == this.gridSize - 1 ? c = 1 : d % this.gridSize == this.gridSize - 1 && a % this.gridSize == 0 ? c = -1 : d < this.gridSize && a >= this.gridSize * (this.totalRows - 1) ? c = this.gridSize : d >= this.gridSize * (this.totalRows - 1) && a < this.gridSize && (c = -this.gridSize), c === 1 ? o = 90 : c === -1 ? o = -90 : c === this.gridSize ? o = 180 : c === -this.gridSize && (o = 0) } const r = i + this.cellWidth / 2, l = n + this.cellHeight / 2; this.ctx.translate(r, l), this.ctx.rotate(o * Math.PI / 180), this.ctx.drawImage(this.snakeTailImg, -this.cellWidth / 2, -this.cellHeight / 2, this.cellWidth, this.cellHeight), this.ctx.restore() } else this.ctx.fillStyle = this.serpRed, this.ctx.fillRect(i, n, this.cellWidth, this.cellHeight) }), this.food !== null) { const t = this.food % this.gridSize, e = Math.floor(this.food / this.gridSize), i = t * this.cellWidth, n = e * this.cellHeight; let o = Math.min(this.cellWidth, this.cellHeight) * .8; o < 12 && (o = 12), this.ctx.font = `${o}px "Press Start 2P", Impact, sans-serif`, this.ctx.fillStyle = this.serpRed, this.ctx.textAlign = "center", this.ctx.textBaseline = "middle", t >= 0 && t < this.gridSize && e >= 0 && e < this.totalRows && this.ctx.fillText("$", i + this.cellWidth / 2, n + this.cellHeight / 2) } } move() { if (this.directionQueue.length > 0) { const i = this.directionQueue.shift(); (i === 1 && this.direction !== -1 || i === -1 && this.direction !== 1 || i === this.gridSize && this.direction !== -this.gridSize || i === -this.gridSize && this.direction !== this.gridSize) && (this.direction = i) } let t = this.snake[0], e; if (this.direction === 1 && t % this.gridSize == this.gridSize - 1 ? e = t - (this.gridSize - 1) : this.direction === -1 && t % this.gridSize == 0 ? e = t + (this.gridSize - 1) : this.direction === -this.gridSize && t < this.gridSize ? e = t + this.gridSize * (this.totalRows - 1) : this.direction === this.gridSize && t >= this.gridSize * (this.totalRows - 1) ? e = t - this.gridSize * (this.totalRows - 1) : e = t + this.direction, this.snake.includes(e)) { this.endGame(); return } this.snake.unshift(e), e === this.food ? (this.score++, this.updateScore(), this.placeFood()) : this.snake.pop(), this.draw() } placeFood() { if (this.gridSize <= 0 || this.totalRows <= 0) return; let t, e = 0; const i = 100; do { const n = Math.floor(Math.random() * this.totalRows), o = Math.floor(Math.random() * this.gridSize); if (t = n * this.gridSize + o, e++, e >= i) return } while (this.snake.includes(t)); this.food = t } endGame() { clearInterval(this.interval), cancelAnimationFrame(this.animationFrameId), this.lostScreen && (this.lostScreen.style.display = "flex"), typeof v == "function" && v() } updateScore() { this.scoreElement && (this.scoreElement.textContent = this.score), this.score > this.bestScore && (this.bestScore = this.score, this.saveBestScore(this.score), this.updateBestScore()) } updateBestScore() { if (this.bestScoreElement) { this.bestScoreElement.textContent = this.bestScore, h.set(this.bestScoreElement, { display: "inline-block", opacity: 1, visibility: "visible" }); const t = this.bestScoreElement.parentElement; t && h.set(t, { display: "flex", opacity: 1, visibility: "visible" }) } } loadBestScore() { const t = localStorage.getItem("snakeBestScore"); if (!t) return 0; try { const e = parseInt(t); if (!isNaN(e)) return this.saveBestScore(e), e; const { score: i, timestamp: n } = JSON.parse(t); return (Date.now() - n) / (1e3 * 60 * 60) > 24 ? (localStorage.removeItem("snakeBestScore"), 0) : i } catch { return localStorage.removeItem("snakeBestScore"), 0 } } saveBestScore(t) { const e = { score: t, timestamp: Date.now() }; localStorage.setItem("snakeBestScore", JSON.stringify(e)) } isMobileOrTablet() { return window.innerWidth < 992 } cleanup() { this.interval && clearInterval(this.interval), this.animationFrameId && cancelAnimationFrame(this.animationFrameId), this.resizeObserver && this.resizeObserver.disconnect(), this.mobileControls && this.mobileControls.forEach(e => { e.removeEventListener("click", () => this.handleMobileControl(e)) }), window.removeEventListener("resize", () => this.resizeCanvas()); const t = this.container.querySelector(".score-display"); t && t.parentNode && t.remove() } } document.addEventListener("DOMContentLoaded", R); function k() { return z.initialize() } const Q = "https://lkjbwwgjaxbxltopefax.supabase.co", U = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxramJ3d2dqYXhieGx0b3BlZmF4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcyMTgwMzIsImV4cCI6MjA2Mjc5NDAzMn0.g8t2OfOpz6irjCyOKpd1jNSPo6W5ypCRcdiWl4vAnWU", q = $(Q, U); let p = j(), M, W = !1; function j() { return `anon${Math.floor(1e4 + Math.random() * 9e4)}` } function _() { const s = document.querySelector(".welcome"); s && (s.textContent = `Welcome, ${p} !`) } function O() { document.querySelectorAll(".commands_item").forEach(i => { const n = i.getAttribute("data-command"), o = i.querySelector(".is--answer"); n && o && n.toLowerCase() !== "help" && (i.getAttribute("data-response") || i.setAttribute("data-response", o.innerHTML)) }); const t = document.querySelector(".commands_call"), e = document.querySelector(".commands_list"); t && (t.style.display = "none"), e && (e.style.display = "none") } function P(s, t) {
  const e = s.toLowerCase(), i = e.split(" ")[0]; if (!["say", "user"].includes(i)) { const r = document.createElement("span"); r.classList.add("is-answer"), r.innerHTML = `&gt; ${s}`, t.appendChild(r) } if (e === "help") { const r = document.querySelector(".commands_list").querySelectorAll(".commands_item"); r.forEach((l, a) => { setTimeout(() => { const d = document.createElement("div"); d.classList.add("is-answer", "commands_item"), d.style.display = "flex", d.innerHTML = `&gt;&nbsp;${l.innerHTML}`, t.appendChild(d), t.scrollTop = t.scrollHeight, a === r.length - 1 && y() }, a * 100) }); return } if (e.startsWith("user ")) { const r = s.slice(5).trim(); if (r) { p = r, localStorage.setItem("username", r); const l = document.querySelector(".input"); l && (l.placeholder = ""), setTimeout(() => { const a = document.createElement("span"); a.classList.add("is-answer"), a.innerHTML = `&gt; Welcome, ${p} !`, t.appendChild(a), t.scrollTop = t.scrollHeight, setTimeout(() => { const d = document.createElement("span"); d.classList.add("is-answer"), d.innerHTML = "&gt; Here is a list of available commands:", t.appendChild(d), t.scrollTop = t.scrollHeight; const c = document.querySelector(".commands_list").querySelectorAll(".commands_item"); c.forEach((m, f) => { setTimeout(() => { const g = document.createElement("div"); g.classList.add("is-answer", "commands_item"), g.style.display = "flex", g.innerHTML = `&gt;&nbsp;${m.innerHTML}`, t.appendChild(g), t.scrollTop = t.scrollHeight, f === c.length - 1 && (y(), W || (X(), W = !0)) }, f * 100 + 100) }) }, 400) }, 100) } else { const l = document.createElement("span"); l.classList.add("is-answer"), l.innerHTML = '&gt; Veuillez entrer un nom apr\xE8s "user"', t.appendChild(l), t.scrollTop = t.scrollHeight, y() } return } if (e.startsWith("say ")) { const r = s.slice(4).trim(); if (p = localStorage.getItem("username") || p, !p || !r) return; q.from("messages").insert([{ user: p, content: r }]).then(({ error: l }) => { if (l) { const a = document.createElement("div"); a.classList.add("is-answer"), a.textContent = "Erreur lors de l'envoi du message.", t.appendChild(a) } }); return } if (e === "serp") { const r = document.querySelector(".is--ascii"); if (r) { setTimeout(() => { const l = document.createElement("span"); l.classList.add("is-answer"), l.innerHTML = `&gt; ${r.innerHTML}`, t.appendChild(l), t.scrollTop = t.scrollHeight, y() }, 100); return } } const o = document.querySelector(`.commands_item[data-command="${s}"]`); if (o) {
    const r = o.getAttribute("data-response"); if (r) {
      if (s === "26-7") {
        const a = r.split("---").map(m => m.trim()).filter(Boolean), c = a[Math.floor(Math.random() * a.length)].split(`
`); c.forEach((m, f) => { setTimeout(() => { const g = document.createElement("span"); g.classList.add("is-answer"); const u = m.replace(/\[name\]/gi, p); g.innerHTML = `&gt; ${u}`, t.appendChild(g), t.scrollTop = t.scrollHeight, f === c.length - 1 && y() }, f * 100) }); return
      } const l = r.split(`
`); l.forEach((a, d) => { setTimeout(() => { const c = document.createElement("span"); c.classList.add("is-answer"); const m = a.replace(/\[name\]/gi, p); c.innerHTML = `&gt; ${m}`, t.appendChild(c), t.scrollTop = t.scrollHeight, d === l.length - 1 && y() }, d * 100) })
    }
  } else setTimeout(() => { const r = document.createElement("span"); r.classList.add("is-answer"), r.innerHTML = `&gt; Command not found: "${s}"`, t.appendChild(r), t.scrollTop = t.scrollHeight, y() }, 100)
} function D(s) { const t = s.cloneNode(!0), e = window.getComputedStyle(s), i = e.getPropertyValue("font-size"), n = e.getPropertyValue("line-height"); t.style.position = "absolute", t.style.visibility = "hidden", t.style.height = "auto", t.style.width = e.width, t.style.whiteSpace = "normal", t.style.padding = e.padding, t.style.font = e.font, t.style.letterSpacing = e.letterSpacing, t.style.wordSpacing = e.wordSpacing, t.style.lineHeight = n, t.style.maxWidth = e.maxWidth, t.style.fontSize = i, document.body.appendChild(t); const o = t.getBoundingClientRect().height, r = parseFloat(n), l = Math.round(o / r); return document.body.removeChild(t), l } function x() { const s = document.querySelector("#target"), t = document.querySelector(".chevrons"); if (s && t) { const e = D(s); t.innerHTML = ""; for (let i = 0; i < e; i++) { const n = document.createElement("span"); n.classList.add("chevron"), n.innerHTML = "&gt;", t.appendChild(n) } } document.querySelectorAll(".is-manifesto-text").forEach(e => { var n; const i = (n = e.closest(".manifesto_inner")) == null ? void 0 : n.querySelector(".chevrons"); if (e && i) { const o = D(e); i.innerHTML = ""; for (let r = 0; r < o; r++) { const l = document.createElement("span"); l.classList.add("chevron"), l.innerHTML = "&gt;", i.appendChild(l) } } }) } function y() { document.querySelectorAll(".is-terminal-text").forEach(s => { const n = s.innerHTML.split("<br>").map(o => o.replace(/&gt;\s*/, "")).map(o => { const r = o.match(/^\s*/)[0], l = o.trim(); return `${r}&gt; ${l}` }); s.innerHTML = n.join("<br>") }), typeof M == "function" && M() } function J() { O(), _(); const s = document.querySelector(".input"), t = document.querySelector(".terminal_inner"); s.placeholder = 'Enter "user" + your name'; const e = document.querySelector(".button"); s && t && e && (s.addEventListener("keydown", function (r) { if (r.key === "Enter") { const l = s.value.trim().toLowerCase(); l && (P(l, t), s.value = "") } }), e.addEventListener("click", function () { const r = s.value.trim().toLowerCase(); r && (P(r, t), s.value = "") })), M = x, x(); const i = new ResizeObserver(() => { x() }), n = document.querySelector(".terminal_inner"); n && i.observe(n); const o = document.querySelector("#target"); o && i.observe(o), y(), Y() } async function X() { const s = document.querySelector(".terminal_inner"), { data: t, error: e } = await q.from("messages").select("*").order("created_at", { ascending: !1 }).limit(10); if (e) { const n = document.createElement("div"); n.classList.add("is-answer"), n.textContent = "Erreur lors du chargement des messages.", s.appendChild(n), s.scrollTop = s.scrollHeight; return } (t || []).reverse().forEach(n => { const o = document.createElement("div"); o.classList.add("is-answer"), o.innerHTML = `&gt; [${n.user}] ${n.content}`, s.appendChild(o), s.scrollTop = s.scrollHeight }) } function Y() { q.channel("public:messages").on("postgres_changes", { event: "INSERT", schema: "public", table: "messages" }, s => { const t = s.new, e = document.querySelector(".terminal_inner"), i = document.createElement("div"); i.classList.add("is-answer"), t.user === p && i.classList.add("from-me"), i.innerHTML = `&gt; [${t.user}] ${t.content}`, e.appendChild(i), e.scrollTop = e.scrollHeight }).subscribe() } function I(s) { const t = s.querySelector(".is-manifesto-text"), e = s.querySelector(".chevrons"); t && h.to(t, { opacity: 0, duration: .4, ease: "power2.inOut" }), e && h.to(e, { opacity: 0, duration: .4, ease: "power2.inOut" }) } function H(s) { const t = s.querySelector(".is-manifesto-text"), e = s.querySelector(".chevrons"), i = h.timeline(); t && i.set(t, { opacity: 0 }).to(t, { opacity: 1, duration: .2, ease: "none" }).to(t, { opacity: 0, duration: .2, ease: "none" }).to(t, { opacity: 1, duration: .2, ease: "none" }), e && i.set(e, { opacity: 0 }, 0).to(e, { opacity: 1, duration: .2, ease: "none" }, 0).to(e, { opacity: 0, duration: .2, ease: "none" }, ">").to(e, { opacity: 1, duration: .2, ease: "none" }, ">") } function Z() { const s = document.querySelector(".viewport_right"), t = document.querySelector(".viewport_left"), e = document.querySelectorAll(".toggle_button:not(.is-active)"), i = document.querySelector(".toggle_button.is-active"), n = document.querySelectorAll(".toggle_arrow"), o = document.querySelector(".is--label"); if (window.innerWidth < 992) return t.style.display = "none", Promise.resolve(); const r = h.timeline(); return o && h.set(o, { display: "none" }), r.to(e, { flex: "0 1 0%", opacity: 0, duration: .6, ease: "power2.inOut" }).to(n, { opacity: 0, duration: .3, onComplete: () => { e.forEach(l => l.style.display = "none"), n.forEach(l => l.style.display = "none") } }, "<").to(i, { flex: "1 1 100%", duration: .8, ease: "power2.inOut" }, "<"), r.to(s, { width: "100vw", duration: 1, ease: "serpeasing", onComplete: function () { t.style.display = "none", i && (i.style.display = "none", i.classList.remove("is-active")) } }, 0), r } function E(s, t, e = 500) { const i = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%.-"; let n = 0; const o = Math.max(t.length, s.textContent.length), r = setInterval(() => { const l = t.split("").map((a, d) => d < n ? t[d] : i[Math.floor(Math.random() * i.length)]).join(""); s.textContent = l, n++, n >= o && (clearInterval(r), s.textContent = t) }, e / o) } function K() { "scrollRestoration" in history && (history.scrollRestoration = "manual"), S.hooks.before(e => { e.next.namespace !== "home" && (document.body.classList.add("barba-transition"), document.body.style.animation = "hide-scrollbars 1.5s forwards", document.documentElement.style.overflow = "hidden", document.body.style.overflow = "hidden") }), S.hooks.after(() => { window.scrollTo(0, 0), typeof x == "function" && h.delayedCall(.1, x), typeof v == "function" && h.delayedCall(.1, v); const e = window.innerWidth < 992, i = document.querySelector(".viewport_right"), n = document.querySelector(".viewport_right-inner"), o = document.querySelector(".content-wrapper"), r = document.querySelector(".view-container"), l = document.querySelector(".game_inner"), a = document.querySelector("#game-view.is-visible"); e && i && !a && (h.set(i, { height: "auto", minHeight: "auto", display: "block", overflow: "visible" }), n && h.set(n, { height: "auto", minHeight: "auto", display: "block", overflow: "visible" }), o && h.set(o, { height: "auto", minHeight: "auto", display: "block", overflow: "visible" }), r && h.set(r, { height: "auto", minHeight: "auto", display: "block", overflow: "visible" }), l && h.set(l, { height: "auto", minHeight: "auto", display: "block", overflow: "visible" })), h.delayedCall(.3, () => { document.body.classList.remove("barba-transition"), document.body.style.animation = "", document.documentElement.style.overflow = "", document.body.style.overflow = "" }) }); const s = { name: "default-transition", leave: ({ current: e }) => new Promise(i => { I(e.container), h.delayedCall(.4, i) }), enter({ next: e, current: i }) { H(e.container); const n = i == null ? void 0 : i.container.querySelector(".toggle_button.is-active"), o = e.container.querySelector(".is--label"); if (n && o) { const c = n.getBoundingClientRect(); h.set(o, { position: "absolute", top: c.top, left: c.left, width: c.width, height: c.height, display: "flex" }), h.to(o, { position: "static", clearProps: "all", duration: .3, ease: "power2.inOut" }), I(o), H(o) } const r = e.container.querySelector("#manifesto > .label"), l = i == null ? void 0 : i.container.querySelector("#manifesto > .label"), a = e.container.querySelector(".is--scramble"), d = i == null ? void 0 : i.container.querySelector(".is--scramble"); return r && l && E(r, r.textContent), a && d && E(a, a.textContent), Promise.resolve() }, after() { A() } }, t = { name: "leave-home-transition", from: { namespace: "home" }, leave: e => new Promise(i => { I(e.current.container), h.delayedCall(.4, () => { Z().then(i) }) }), enter({ next: e, current: i }) { H(e.container); const n = e.container.querySelector("#manifesto > .label"), o = i == null ? void 0 : i.container.querySelector("#manifesto > .label"); return n && o && E(n, n.textContent), Promise.resolve() }, after() { A() } }; S.init({ prevent: ({ el: e }) => { const i = e.href.replace(window.location.origin, ""); return i === "/" || i === "/index.html" || i.startsWith("/?") || i.startsWith("/index.html?") }, debug: !1, preventRunning: !0, prefetch: !0, transitions: [t, s] }), S.hooks.enter(e => { e.next.namespace !== "home" && h.delayedCall(1, () => { e.next.container.style.opacity === "0" && h.to(e.next.container, { opacity: 1, duration: .3 }) }) }), window.addEventListener("error", e => { if (e.error && e.error.message && e.error.message.includes("barba")) { document.body.classList.remove("barba-transition"), document.body.style.animation = "", document.documentElement.style.overflow = "", document.body.style.overflow = ""; const i = document.querySelector('[data-barba="container"]'); i && (i.style.opacity = "1") } }), window.addEventListener("popstate", () => { const e = window.location.pathname; if (e === "/" || e === "/index.html") { window.location.reload(); return } S.history && S.history.current && (S.history.current.trigger = "back") }) } h.registerPlugin(L); L.create("serpeasing", "M0,0 C0.37,0.01 0.01,0.99 1,1"); function ee() {
  if (window.asciiArtTimestamp && Date.now() - window.asciiArtTimestamp < 100) return; console.log("%c" + `
  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 corp
 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557
 \u255A\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D
  \u255A\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255D  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u255D 
 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     
 \u255A\u2550\u2550\u2550\u2550\u2550\u255D \u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D\u255A\u2550\u255D  \u255A\u2550\u255D\u255A\u2550\u255D     `, "color: #ff4139; font-weight: bold;"), console.log("%cSERP Corp", "color: #ff4139; font-size: 16px; font-weight: bold;"), window.asciiArtTimestamp = Date.now()
} const te = { ".is-rate": { type: "number", min: 40, max: 50, suffix: "%" }, ".is-souls": { type: "number", min: 91, max: 97, range: !0, decimalPlaces: 3, suffix: "" }, ".is-entropy": { type: "number", range: !0, min: -.017, max: .115, suffix: "\u0394", decimalPlaces: 3 }, ".is-trust": { type: "text", options: ["\u2588\u2588\u2588%", "\u2588\u2588\u2588%", "\u2588\u2588%", "--"] }, ".is-initiation": { type: "number", min: 5, max: 12, suffix: "await." }, ".is-neural": { type: "text", options: ["High", "Med.", "Null", "Max.", "Lost", "--", "\u221E"] }, ".is-origin": { type: "text", options: ["@serp", "@v0id", "--", "@\u03A9421", "@\u03A9314"] }, ".is-pulse": { type: "number", min: 10.8, max: 17.7, suffix: "HZ" }, ".is-memory": { type: "number", min: 18, max: 71, suffix: "% Mem" }, ".is-cpu": { type: "number", min: 21, max: 82, suffix: "% CPU" } }; function ie(s) { if (s.type === "number") { if (s.range) { const e = Math.random() * (s.max - s.min) + s.min, i = e.toFixed(s.decimalPlaces || 3); return `${e >= 0 ? `+${i}` : i}${s.suffix || ""}` } return `${Math.floor(Math.random() * (s.max - s.min + 1)) + s.min}${s.suffix || ""}` } else if (s.type === "text") return s.options[Math.floor(Math.random() * s.options.length)]; return "" } function se() { Object.entries(te).forEach(([s, t]) => { document.querySelectorAll(s).forEach(i => { const n = ie(t); E(i, n) }) }) } function oe() { ee(), setInterval(se, 4e3), G() } function A() { var n; J(), O(), _(), F(); const s = document.querySelector(".dropdown"), t = document.querySelector(".dropdown-inner"); if (s) { const o = s.cloneNode(!0); s.parentNode.replaceChild(o, s), o.addEventListener("click", () => { if (t) { const r = window.getComputedStyle(t).display !== "none"; t.style.display = r ? "none" : "flex" } }) } re("[data-scramble]", { target: ".label" }), le(), ne(); const e = document.getElementById("game"), i = document.getElementById("manifesto"); e && i && (((n = document.querySelector('[data-barba="container"]')) == null ? void 0 : n.dataset.barbaNamespace) === "home" && (e.classList.add("is-active"), i.classList.remove("is-active")), e.addEventListener("click", () => { var r; e.classList.contains("is-active") || (e.classList.add("is-active"), i.classList.remove("is-active"), ((r = document.querySelector('[data-barba="container"]')) == null ? void 0 : r.dataset.barbaNamespace) === "home" && requestAnimationFrame(() => { k() })) }), i.addEventListener("click", () => { i.classList.contains("is-active") || (i.classList.add("is-active"), e.classList.remove("is-active")) })) } function ne() {
  const s = document.getElementById("manifesto"), t = document.getElementById("game"), e = document.getElementById("manifesto-view"), i = document.getElementById("game-view"), n = document.getElementById("left-arrow"), o = document.getElementById("right-arrow"), r = document.querySelector(".viewport_right"), l = document.querySelector(".viewport_right-inner"), a = document.querySelector(".content-wrapper"), d = document.querySelector(".view-container"), c = document.querySelector(".game_inner"), m = document.querySelector(".game-controls"); if (!s || !t || !e || !i || !n || !o || !r || !l || !a || !d || !c || !m) return; function f(u) {
    var B; const N = ((B = document.querySelector('[data-barba="container"]')) == null ? void 0 : B.dataset.barbaNamespace) === "home", V = window.innerWidth < 992; e.classList.toggle("is-visible", u), i.classList.toggle("is-visible", !u), s.classList.toggle("is-active", u), t.classList.toggle("is-active", !u), n.classList.toggle("is-active", u), o.classList.toggle("is-active", !u), n.style.opacity = u ? "1" : "0.5", o.style.opacity = u ? "0.5" : "1", v(), u ? (V ? (r.style.cssText = `
          height: auto;
          min-height: auto;
          display: block;
          overflow: visible;
        `, l.style.cssText = `
          height: auto;
          min-height: auto;
          display: block;
          overflow: visible;
        `, a.style.cssText = `
          height: auto;
          min-height: auto;
          display: block;
          overflow: visible;
        `, d.style.cssText = `
          height: auto;
          min-height: auto;
          display: block;
          overflow: visible;
        `, c.style.cssText = `
          height: auto;
          min-height: auto;
          display: block;
          overflow: visible;
        `) : (r.style.cssText = "", l.style.cssText = "", a.style.cssText = "", d.style.cssText = "", c.style.cssText = ""), setTimeout(() => { y() }, 0)) : (r.style.cssText = `
        height: 100vh;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        overflow: hidden;
      `, l.style.cssText = `
        height: 100%;
        min-height: 0;
        display: flex;
        flex-direction: column;
        overflow: hidden;
      `, a.style.cssText = `
        height: 100%;
        min-height: 0;
        display: flex;
        flex-direction: column;
        overflow: hidden;
      `, d.style.cssText = `
        flex: 1;
        min-height: 0;
        display: flex;
        flex-direction: column;
        overflow: hidden;
      `, c.style.cssText = `
        flex: 1;
        min-height: 0;
        display: flex;
        position: relative;
        overflow: hidden;
      `, N && (c._cleanup && c._cleanup(), k()))
  } s.addEventListener("click", () => { f(!0) }), t.addEventListener("click", () => { f(!1) }); function g(u, w) { u.addEventListener("mouseenter", () => { u.classList.contains("is-active") || (w.style.opacity = "1", w.classList.remove("animate"), w.offsetWidth, w.classList.add("animate")) }), u.addEventListener("mouseleave", () => { u.classList.contains("is-active") || (w.style.opacity = "0.5") }), w.addEventListener("animationend", () => { w.classList.remove("animate") }) } g(s, n), g(t, o), i.classList.contains("is-visible") ? (r.style.cssText = `
      height: 100vh;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    `, l.style.cssText = `
      height: 100%;
      min-height: 0;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    `, a.style.cssText = `
      height: 100%;
      min-height: 0;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    `, d.style.cssText = `
      flex: 1;
      min-height: 0;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    `, c.style.cssText = `
      flex: 1;
      min-height: 0;
      display: flex;
      position: relative;
      overflow: hidden;
    `) : setTimeout(() => { y() }, 0)
} function re(s, t = {}) { const { speed: e = 150, target: i = null } = t, n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_-+=<>?/[]{}"; document.querySelectorAll(s).forEach(o => { const r = i ? o.querySelector(i) : o; if (!r) return; const l = r.textContent; o.addEventListener("mouseenter", () => { let a = "", d = 0; const c = setInterval(() => { a = ""; for (let m = 0; m < l.length; m++)m < d ? a += l[m] : a += n.charAt(Math.floor(Math.random() * n.length)); r.textContent = a, d < l.length ? d++ : (clearInterval(c), r.textContent = l) }, e) }) }) } function le() { const s = document.querySelector(".home"), t = document.querySelector(".nav-wrapper"), e = document.querySelector(".header"); if (!s || !t || !e) return; const i = window.matchMedia("(max-width: 991px)"); function n(o) { o.matches ? s.parentElement !== t && t.insertBefore(s, t.firstChild) : s.parentElement !== e && e.insertBefore(s, t) } n(i), i.addEventListener("change", n) } document.addEventListener("DOMContentLoaded", () => { var a; oe(), K(), A(), v(); const s = window.innerWidth < 992, t = document.querySelector(".viewport_right"), e = document.querySelector(".viewport_right-inner"), i = document.querySelector(".content-wrapper"), n = document.querySelector(".view-container"), o = document.querySelector(".game_inner"), r = document.querySelector("#game-view.is-visible"); if (s && t && !r && (t.style.height = "auto", t.style.minHeight = "auto", t.style.display = "block", t.style.overflow = "visible", e && (e.style.height = "auto", e.style.minHeight = "auto", e.style.display = "block", e.style.overflow = "visible"), i && (i.style.height = "auto", i.style.minHeight = "auto", i.style.display = "block", i.style.overflow = "visible"), n && (n.style.height = "auto", n.style.minHeight = "auto", n.style.display = "block", n.style.overflow = "visible"), o && (o.style.height = "auto", o.style.minHeight = "auto", o.style.display = "block", o.style.overflow = "visible")), ((a = document.querySelector('[data-barba="container"]')) == null ? void 0 : a.dataset.barbaNamespace) === "home") { const d = document.getElementById("game"), c = document.getElementById("manifesto"); d && c && (d.classList.add("is-active"), c.classList.remove("is-active")), k() } }); window.addEventListener("resize", () => {
  var a; const s = (a = document.querySelector('[data-barba="container"]')) == null ? void 0 : a.dataset.barbaNamespace, t = window.innerWidth < 992, e = document.querySelector(".viewport_right"), i = document.querySelector(".viewport_right-inner"), n = document.querySelector(".content-wrapper"), o = document.querySelector(".view-container"), r = document.querySelector(".game_inner"), l = document.querySelector("#game-view.is-visible"); v(), e && (s === "home" && (t ? e.style.removeProperty("width") : (e.style.width = window.innerWidth >= 1440 ? "60vw" : "70vw", l && (e.style.cssText = `
            width: ${window.innerWidth >= 1440 ? "60vw" : "70vw"};
            height: 100vh;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
          `, i && (i.style.cssText = `
              height: 100%;
              min-height: 0;
              display: flex;
              flex-direction: column;
              overflow: hidden;
            `), n && (n.style.cssText = `
              height: 100%;
              min-height: 0;
              display: flex;
              flex-direction: column;
              overflow: hidden;
            `), o && (o.style.cssText = `
              flex: 1;
              min-height: 0;
              display: flex;
              flex-direction: column;
              overflow: hidden;
            `), r && (r.style.cssText = `
              flex: 1;
              min-height: 0;
              display: flex;
              position: relative;
              overflow: hidden;
            `)))), t && !l && (e.style.height = "auto", e.style.minHeight = "auto", e.style.display = "block", e.style.overflow = "visible", i && (i.style.height = "auto", i.style.minHeight = "auto", i.style.display = "block", i.style.overflow = "visible"), n && (n.style.height = "auto", n.style.minHeight = "auto", n.style.display = "block", n.style.overflow = "visible"), o && (o.style.height = "auto", o.style.minHeight = "auto", o.style.display = "block", o.style.overflow = "visible"), r && (r.style.height = "auto", r.style.minHeight = "auto", r.style.display = "block", r.style.overflow = "visible"))), typeof x == "function" && x()
}); function v() { const s = window.innerWidth < 992, t = document.querySelector("#game-view.is-visible"), e = document.querySelector(".game-controls"), i = document.getElementById("restart"); if (!(!e || !i)) { if (!t) { e.style.display = "none", i.style.display = "none"; return } s ? (e.style.display = "flex", i.style.display = "none") : (e.style.display = "none", i.style.display = "flex") } }
